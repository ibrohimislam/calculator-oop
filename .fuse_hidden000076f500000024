#include "Penghitung.h"
#include "STL/stack.h"

Penghitung::Penghitung() {}

Penghitung::Penghitung(const Penghitung& p) {
	ModeSintaks = p.ModeSintaks;
	ModeMathLogic = p.ModeMathLogic;
}

Penghitung::~Penghitung() {}
// operator= tidak diperlukan karena tidak ada pointer

double Penghitung::Calculate(Expression E) {
	double ans = 0.0, bef;
	Operator o;
	if(ModeMathLogic = logic) {
		for(int i = 0; i < E.size(); ++i) {
			Token cur = E.GetToken(i);
			if (cur.GetType() != opr || cur.GetJenisOperator() == kurungBuka) 
				o = Operator("+");
				continue;
			else {
				o = cur;
			}
			if (cur.GetType() == opr && cur.GetJenisOperator() == kurungBuka) {
				int parenthesesBalance = 1;
				Expression Ee;
				while (i < (E.size() - 1) && parenthesesBalance != 0) {
					++i;
					if (cur.GetType() == opr) {
						parenthesesBalance +=
							(cur.GetJenisOperator() == kurungBuka ? 1
							: cur.GetJenisOperator() == kurungBuka ? -1
							: 0);
					}
					if (parenthesesBalance) Ee.AddToken(&cur);
				}
				if (parenthesesBalance != 0) throw //Expression wrong
				else {
					bef = Calculate(Ee);
				}
			}
			else if (cur.GetType() == opr && cur.GetJenisOperator() == kurungTutup)
				throw //Expression wrong
			else
				bef = cur.GetValue();
			ans = CalculateAtom(ans, bef, o);
		}
	} else {
		Expression cur;
		switch (ModeSintaks) {
			infix : return CalculateInfix(E);
			postfix : E.InvertExpression();
			prefix : return CalculatePrefix(E);
		}
	}
}

void Penghitung::SetSintaks(EnumSintaks Mode) {
	ModeSintaks = Mode;
}

void Penghitung::SetMathLogic(EnumMathLogic Mode) {
	ModeMathLogic = Mode;
}

double Penghitung::CalculateAtom(Bilangan a, Bilangan b, Operator o) {
	switch(o) {
		plus : return a.GetValue() + b.GetValue();
		minus : return a.GetValue() - b.GetValue();
		bagi : return a.GetValue() / b.GetValue();
		kali : return a.GetValue() * b.GetValue();
		Div : return a.GetValue() + b.GetValue();
		Mod : return a.GetValue() + b.GetValue();
		And : return int(a.GetValue()) & int(b.GetValue());
		Or : return int(a.GetValue()) | int(b.GetValue());
		Xor : return int(a.GetValue()) ^ int(b.GetValue());
	}
}